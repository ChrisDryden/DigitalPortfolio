{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Re",
				"Resume-ChrisDryden"
			],
			[
				"tota",
				"totalTime"
			],
			[
				"area",
				"areaPerSecond"
			],
			[
				"cal",
				"calculatedFocal"
			],
			[
				"elev",
				"elevation_test"
			],
			[
				"calc",
				"calculatedFocal"
			],
			[
				"pixel",
				"pixelpointx"
			],
			[
				"pano",
				"panoid"
			],
			[
				"ex",
				"except"
			],
			[
				"turnOn",
				"turnOnMotorS0"
			],
			[
				"li",
				"list_of_characters"
			],
			[
				"hori",
				"horizontalwordsobjects"
			],
			[
				"object",
				"objectword"
			],
			[
				"hor",
				"horizontalwords"
			],
			[
				"add",
				"addcharacter"
			],
			[
				"d",
				"d"
			],
			[
				"mes",
				"message"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python\n#\n# Copyright (c) 2013 Eric Romano (@gelstudios)\n# released under The MIT license (MIT) http://opensource.org/licenses/MIT\n#\n\"\"\"\ngitfiti\n\nnoun : Carefully crafted graffiti in a GitHub commit history calendar\n\"\"\"\n\nfrom datetime import datetime, timedelta\nimport itertools\nimport json\nimport math\ntry:\n    # Python 3+\n    from urllib.error import HTTPError, URLError\n    from urllib.request import urlopen\nexcept ImportError:\n    # Python 2\n    from urllib2 import HTTPError, URLError, urlopen\n\ntry:\n    # Python 2\n    raw_input\nexcept NameError:\n    # Python 3 (Python 2's `raw_input` was renamed to `input`)\n    raw_input = input\n\n\nGITHUB_BASE_URL = 'https://github.com/'\nFALLBACK_IMAGE = 'kitty'\n\n\nTITLE = '''\n          _ __  _____ __  _\n   ____ _(_) /_/ __(_) /_(_)\n  / __ `/ / __/ /_/ / __/ /\n / /_/ / / /_/ __/ / /_/ /\n \\__, /_/\\__/_/ /_/\\__/_/\n/____/\n'''\n\n\nKITTY = [\n  [0,0,0,4,0,0,0,0,4,0,0,0],\n  [0,0,4,2,4,4,4,4,2,4,0,0],\n  [0,0,4,2,2,2,2,2,2,4,0,0],\n  [2,2,4,2,4,2,2,4,2,4,2,2],\n  [0,0,4,2,2,3,3,2,2,4,0,0],\n  [2,2,4,2,2,2,2,2,2,4,2,2],\n  [0,0,0,3,4,4,4,4,3,0,0,0],\n]\n\nONEUP = [\n  [0,4,4,4,4,4,4,4,0],\n  [4,3,2,2,1,2,2,3,4],\n  [4,2,2,1,1,1,2,2,4],\n  [4,3,4,4,4,4,4,3,4],\n  [4,4,1,4,1,4,1,4,4],\n  [0,4,1,1,1,1,1,4,0],\n  [0,0,4,4,4,4,4,0,0],\n]\n\nONEUP2 = [\n  [0,0,4,4,4,4,4,4,4,0,0],\n  [0,4,2,2,1,1,1,2,2,4,0],\n  [4,3,2,2,1,1,1,2,2,3,4],\n  [4,3,3,4,4,4,4,4,3,3,4],\n  [0,4,4,1,4,1,4,1,4,4,0],\n  [0,0,4,1,1,1,1,1,4,0,0],\n  [0,0,0,4,4,4,4,4,0,0,0],\n]\n\nHACKERSCHOOL = [\n  [4,4,4,4,4,4],\n  [4,3,3,3,3,4],\n  [4,1,3,3,1,4],\n  [4,3,3,3,3,4],\n  [4,4,4,4,4,4],\n  [0,0,4,4,0,0],\n  [4,4,4,4,4,4],\n]\n\nOCTOCAT = [\n  [0,0,0,4,0,0,0,4,0],\n  [0,0,4,4,4,4,4,4,4],\n  [0,0,4,1,3,3,3,1,4],\n  [4,0,3,4,3,3,3,4,3],\n  [0,4,0,0,4,4,4,0,0],\n  [0,0,4,4,4,4,4,4,4],\n  [0,0,4,0,4,0,4,0,4],\n]\n\nOCTOCAT2 = [\n  [0,0,4,0,0,4,0],\n  [0,4,4,4,4,4,4],\n  [0,4,1,3,3,1,4],\n  [0,4,4,4,4,4,4],\n  [4,0,0,4,4,0,0],\n  [0,4,4,4,4,4,0],\n  [0,0,0,4,4,4,0],\n]\n\nHELLO = [\n  [0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,4],\n  [0,2,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,4],\n  [0,3,3,3,0,2,3,3,0,3,0,3,0,1,3,1,0,3],\n  [0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,3],\n  [0,3,0,3,0,3,3,3,0,3,0,3,0,3,0,3,0,2],\n  [0,2,0,2,0,2,0,0,0,2,0,2,0,2,0,2,0,0],\n  [0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,4],\n]\n\nHIREME = [\n  [1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n  [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n  [3,3,3,0,2,0,3,3,3,0,2,3,3,0,0,3,3,0,3,0,0,2,3,3],\n  [4,0,4,0,4,0,4,0,0,0,4,0,4,0,0,4,0,4,0,4,0,4,0,4],\n  [3,0,3,0,3,0,3,0,0,0,3,3,3,0,0,3,0,3,0,3,0,3,3,3],\n  [2,0,2,0,2,0,2,0,0,0,2,0,0,0,0,2,0,2,0,2,0,2,0,0],\n  [1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1],\n]\n\nBEER = [\n  [0,0,0,0,0,1,0,0,3,3,0,3,0,0,0,1],\n  [0,0,5,1,1,0,1,3,4,0,2,0,0,2,3,1],\n  [1,2,4,2,0,4,1,0,0,0,2,0,0,1,4,0],\n  [0,1,4,0,1,2,5,2,0,5,1,0,0,2,3,0],\n  [2,1,0,2,5,6,0,2,4,2,3,0,0,0,0,3],\n  [0,2,0,1,3,0,0,1,2,1,6,1,0,3,6,4],\n  [0,0,2,0,0,1,3,0,8,0,0,1,0,4,0,0],\n]\n\n\nASCII_TO_NUMBER = {\n  '_': 0,\n  '_': 1,\n  '~': 2,\n  '=': 3,\n  '*': 4,\n}\n\n\ndef str_to_sprite(content):\n    # Break out lines and filter any excess\n    lines = content.split('\\n')\n    def is_empty_line(line):\n        return len(line) != 0\n    lines = filter(is_empty_line, lines)\n\n    # Break up lines into each character\n    split_lines = [list(line) for line in lines]\n\n    # Replace each character with its numeric equivalent\n    for line in split_lines:\n        for index, char in enumerate(line):\n            line[index] = ASCII_TO_NUMBER.get(char, 0)\n\n    # Return the formatted str\n    return split_lines\n\n\nONEUP_STR = str_to_sprite('''\n *******\n*=~~-~~=*\n*~~---~~*\n*=*****=*\n**-*-*-**\n *-----*\n  *****\n''')\n\n\nIMAGES = {\n  'kitty': KITTY,\n  'oneup': ONEUP,\n  'oneup2': ONEUP2,\n  'hackerschool': HACKERSCHOOL,\n  'octocat': OCTOCAT,\n  'octocat2': OCTOCAT2,\n  'hello': HELLO,\n  'hireme': HIREME,\n  'oneup_str': ONEUP_STR,\n  'beer': BEER,\n}\n\n\ndef load_images(img_names):\n    \"\"\"loads user images from given file(s)\"\"\"\n    if img_names[0] == '':\n        return {}\n\n    for image_name in img_names:\n        img = open(image_name)\n        loaded_imgs = {}\n        img_list = ''\n        img_line = ' '\n        name = img.readline().replace('\\n', '')\n        name = name[1:]\n\n        while True:\n            img_line = img.readline()\n            if img_line == '':\n                break\n\n            img_line.replace('\\n', '')\n            if img_line[0] == ':':\n                loaded_imgs[name] = json.loads(img_list)\n                name = img_line[1:]\n                img_list = ''\n            else:\n                img_list += img_line\n\n        loaded_imgs[name] = json.loads(img_list)\n\n        return loaded_imgs\n\n\ndef retrieve_contributions_calendar(username, base_url):\n    \"\"\"retrieves the GitHub commit calendar data for a username\"\"\"\n    base_url = base_url + 'users/' + username\n\n    try:\n        url = base_url + '/contributions'\n        page = urlopen(url)\n    except (HTTPError, URLError) as e:\n        print('There was a problem fetching data from {0}'.format(url))\n        print(e)\n        raise SystemExit\n\n    return page.read().decode('utf-8')\n\n\ndef parse_contributions_calendar(contributions_calendar):\n    \"\"\"Yield daily counts extracted from the contributions SVG.\"\"\"\n    for line in contributions_calendar.splitlines():\n        for day in line.split():\n            if 'data-count=' in day:\n                commit = day.split('=')[1]\n                commit = commit.strip('\"')\n                yield int(commit)\n\n\ndef find_max_daily_commits(contributions_calendar):\n    \"\"\"finds the highest number of commits in one day\"\"\"\n    daily_counts = parse_contributions_calendar(contributions_calendar)\n    return max(daily_counts)\n\n\ndef calculate_multiplier(max_commits):\n    \"\"\"calculates a multiplier to scale GitHub colors to commit history\"\"\"\n    m = max_commits / 4.0\n\n    if m == 0:\n        return 1\n\n    m = math.ceil(m)\n    m = int(m)\n    return m\n\n\ndef get_start_date():\n    \"\"\"returns a datetime object for the first sunday after one year ago today\n    at 12:00 noon\"\"\"\n    today = datetime.today()\n    date = datetime(today.year - 1, today.month, today.day, 12)\n    weekday = datetime.weekday(date)\n\n    while weekday < 6:\n        date = date + timedelta(1)\n        weekday = datetime.weekday(date)\n\n    return date\n\n\ndef generate_next_dates(start_date, offset=0):\n    \"\"\"generator that returns the next date, requires a datetime object as\n    input. The offset is in weeks\"\"\"\n    start = offset * 7\n    for i in itertools.count(start):\n        yield start_date + timedelta(i)\n\n\ndef generate_values_in_date_order(image, multiplier=1):\n    height = 7\n    width = len(image[0])\n\n    for w in range(width):\n        for h in range(height):\n            yield image[h][w] * multiplier\n\n\ndef commit(commitdate):\n    template = (\n        '''GIT_AUTHOR_DATE={0} GIT_COMMITTER_DATE={1} '''\n        '''git commit --allow-empty -m \"gitfiti\" > /dev/null\\n'''\n    )\n    return template.format(commitdate.isoformat(), commitdate.isoformat())\n\n\ndef fake_it(image, start_date, username, repo, git_url, offset=0, multiplier=1):\n    template = (\n        '#!/bin/bash\\n'\n        'REPO={0}\\n'\n        'git init $REPO\\n'\n        'cd $REPO\\n'\n        'touch README.md\\n'\n        'git add README.md\\n'\n        'touch gitfiti\\n'\n        'git add gitfiti\\n'\n        '{1}\\n'\n        'git remote add origin {2}:{3}/$REPO.git\\n'\n        'git pull origin master\\n'\n        'git push -u origin master\\n'\n    )\n\n    strings = []\n    for value, date in zip(generate_values_in_date_order(image, multiplier),\n            generate_next_dates(start_date, offset)):\n        for _ in range(value):\n            strings.append(commit(date))\n\n    return template.format(repo, ''.join(strings), git_url, username)\n\n\ndef save(output, filename):\n    \"\"\"Saves the list to a given filename\"\"\"\n    with open(filename, 'w') as f:\n        f.write(output)\n\n\ndef request_user_input(prompt='> '):\n    \"\"\"Request input from the user and return what has been entered.\"\"\"\n    return raw_input(prompt)\n\n\ndef main():\n    print(TITLE)\n\n    ghe = request_user_input(\n        'Enter GitHub URL (leave blank to use {}): '.format(GITHUB_BASE_URL))\n\n    username = request_user_input('Enter your GitHub username: ')\n\n    git_base = ghe if ghe else GITHUB_BASE_URL\n\n    contributions_calendar = retrieve_contributions_calendar(username, git_base)\n\n    max_daily_commits = find_max_daily_commits(contributions_calendar)\n\n    m = calculate_multiplier(max_daily_commits)\n\n    repo = request_user_input(\n        'Enter the name of the repository to use by gitfiti: ')\n\n    offset = request_user_input(\n        'Enter the number of weeks to offset the image (from the left): ')\n\n    offset = int(offset) if offset.strip() else 0\n\n    print((\n        'By default gitfiti.py matches the darkest pixel to the highest\\n'\n        'number of commits found in your GitHub commit/activity calendar,\\n'\n        '\\n'\n        'Currently this is: {0} commits\\n'\n        '\\n'\n        'Enter the word \"gitfiti\" to exceed your max\\n'\n        '(this option generates WAY more commits)\\n'\n        'Any other input will cause the default matching behavior'\n    ).format(max_daily_commits))\n    match = request_user_input()\n\n    match = m if (match == 'gitfiti') else 1\n\n    print('Enter file(s) to load images from (blank if not applicable)')\n    img_names = request_user_input().split(' ')\n\n    loaded_images = load_images(img_names)\n    images = dict(IMAGES, **loaded_images)\n\n    print('Enter the image name to gitfiti')\n    print('Images: ' + ', '.join(images.keys()))\n    image = request_user_input()\n\n    image_name_fallback = FALLBACK_IMAGE\n\n    if not image:\n        image = IMAGES[image_name_fallback]\n    else:\n        try:\n            image = images[image]\n        except:\n            image = IMAGES[image_name_fallback]\n\n    start_date = get_start_date()\n    fake_it_multiplier = m * match\n\n    if not ghe:\n        git_url = 'git@github.com'\n    else:\n        git_url = request_user_input('Enter Git URL like git@site.github.com: ')\n\n    output = fake_it(image, start_date, username, repo, git_url, offset,\n                     fake_it_multiplier)\n\n    save(output, 'gitfiti.sh')\n    print('gitfiti.sh saved.')\n    print('Create a new(!) repo named {0} at {1} and run the script'.format(repo, git_base))\n\n\nif __name__ == '__main__':\n    main()\n",
			"file": "/C/Users/Chris Dryden/Desktop/projects/githubCommit/gitfiti.py",
			"file_size": 10827,
			"file_write_time": 131659451541456672,
			"settings":
			{
				"buffer_size": 10287,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Chris Dryden/Desktop/projects/PersonalWebsite/main.css",
		"/C/Users/Chris Dryden/Desktop/projects/PersonalWebsite/index.html",
		"/C/Users/Chris Dryden/Desktop/projects/githubCommit/gitfiti.py",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/FeatureDetector/saveimages.py",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/FeatureDetector/main.py",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/FeatureDetector/blob_detection.py",
		"/C/Users/Chris Dryden/Desktop/projects/TournamentWebsite/static/style.css",
		"/C/Users/Chris Dryden/Desktop/projects/TournamentWebsite/templates/login.html",
		"/C/Users/Chris Dryden/Desktop/projects/TournamentWebsite/main.py",
		"/C/Users/Chris Dryden/Downloads/lab6Two.s",
		"/C/Users/Chris Dryden/Downloads/jennifer-website-3/jennifer website/contact.html",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/saveimages.py",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/blob_detection.py",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/main.py",
		"/C/Users/Chris Dryden/Desktop/projects/UTAT UAV/svaeimages",
		"/C/UTSUCoin/CustomGenesis.json",
		"/C/Users/Chris Dryden/Desktop/sub1.s",
		"/C/Users/Chris Dryden/Desktop/projects/2018/Search By Convolution Unsupervised Learning/visualsearch/dict.json",
		"/C/Users/Chris Dryden/Desktop/Github Repositories/lib/chrisdryden/UofTHack/package.json",
		"/C/Users/Chris Dryden/Desktop/Github Repositories/lib/chrisdryden/UofTHack/functions/__main__.js"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"arrow",
			"top",
			"img",
			"\t",
			"get_features",
			"r12",
			"_",
			"\""
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"    ",
			"r11",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Chris Dryden/Desktop/projects/githubCommit/gitfiti.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10287,
						"regions":
						{
						},
						"selection":
						[
							[
								2891,
								2891
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3180.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "workspace.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
